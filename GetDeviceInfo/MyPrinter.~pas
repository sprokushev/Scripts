unit MyPrinter;

interface

uses Windows, Classes, WinSpool, MyWin, Registry, SysUtils, WbemScripting_TLB, strUtils, ActiveX, Variants;

const
  PRINTER_ATTRIBUTE_FAX=$00004000;

type
  TPrinterInfo=array [1..128] of record
    NETBIOS_NAME:string; // сетевое имя ПК
    PRINTER_DEVICE_ID: string; // уникальный ID
    PRINTER_NAME:string; // имя принтера
    PRINTER_SHARE_NAME: string; // сетевое имя принтера
    PRINTER_MANUFACTURER:string;// производитель
    PRINTER_ATTACHED:integer; // 1-принтер подключен
    PRINTER_PRIMARY: integer; // 1-принтер по умолчанию
    PRINTER_LOCAL:integer; //1-локальный, 0-сетевой
    PRINTER_ATTRIBUTE: string;
    PRINTER_COLOR: integer; // 1-цветной
    PRINTER_DUPLEX: integer; //1-дуплекс
    PRINTER_FAX: integer; //1-факс
    PRINTER_PORT: string; // порт(ы) через которые подключен
    PRINTER_SERIAL_NUMBER:string;
    PRINTER_HARDWARE_DATE:string;
    PRINTER_LOCATION: string; // физическое расположение
    PRINTER_ORIENTATION: string; //LANDSCAPE, PORTRAIT
    PRINTER_PAPER_SIZE: string;
    PRINTER_RESOLUTION: string;
    PRINTER_STATUS: string; //статус
    PRINTER_JOBS: integer; // кол-во распечатанных документов
    PRINTER_AVERAGE: integer; // среднее кол-во страниц в минуту
    PRINTER_DRIVER_NAME: string; // имя драйвера
    PRINTER_DRIVER_DATE:string;
    PRINTER_DRIVER_VERSION:string;
    PRINTER_EDID:string; // служебные данные (версии ПО)
  end;

Procedure FillPrinterInfo;

var
  PrinterCount: integer;
  PrinterInfo: TPrinterInfo;


implementation


Function GetWMIPrinterParameter(Printer: string; Parameter: string): string;
var PropSet: ISWbemPropertySet;
    PropName: string;
    SProp: ISWbemProperty;
    PropEnum, Enum: IEnumVariant;
    TempObj: OleVariant;
    Value: Cardinal;
    WMIServices: ISWbemServices;
    WMIListPrinters: ISWbemObjectSet;
    WMIPrinter: ISWbemObject;
    I: Integer;


  function GetPropValue(SProp: ISWbemProperty):string;
  var
    StrValue: string;
    Count: Cardinal;
  begin
    StrValue:= '';
    if VarIsNull(SProp.Get_Value) then
      StrValue:= ''
    else
      case SProp.CIMType of
        wbemCimtypeUint8, wbemCimtypeSint8, wbemCimtypeUint16, wbemCimtypeSint16,
        wbemCimtypeUint32, wbemCimtypeSint32, wbemCimtypeSint64:
        if VarIsArray(SProp.Get_Value) then
        begin
          if VarArrayHighBound(SProp.Get_Value, 1) > 0 then
            for Count:= 1 to VarArrayHighBound(SProp.Get_Value, 1) do
              StrValue:= Trim(StrValue + ' ' + IntToStr(SProp.Get_Value[Count]));
        end
        else
          StrValue:= IntToStr(SProp.Get_Value);
        wbemCimtypeReal32, wbemCimtypeReal64:
          StrValue:= FloatToStr(SProp.Get_Value);
        wbemCimtypeBoolean:
          if SProp.Get_Value then StrValue:='TRUE' else StrValue:='FALSE';
        wbemCimtypeString:
          if VarIsArray(SProp.Get_Value) then
          begin
            if VarArrayHighBound(SProp.Get_Value, 1) > 0 then
              for Count:= 1 to VarArrayHighBound(SProp.Get_Value, 1) do
                StrValue:= Trim(StrValue + ' ' + SProp.Get_Value[Count]);
          end
          else
            StrValue:= SProp.Get_Value;
        else
          StrValue:='Unknown type';
      end; {case}
    Result:=strValue;
  end;

Begin
  Result:='';

  WMIServices := CoSWbemLocator.Create.ConnectServer('.', 'root\cimv2','', '', '', '', 0, nil);
  WMIServices.Security_.Set_ImpersonationLevel(wbemImpersonationLevelImpersonate);
  if Printer='ALL' then
    WMIListPrinters := WMIServices.ExecQuery('SELECT * FROM Win32_Printer','WQL', 0, nil)
  else
    WMIListPrinters := WMIServices.ExecQuery('SELECT * FROM Win32_Printer WHERE Name = ''' + AnsiReplaceStr(AnsiReplaceStr(Printer, '''', '\'''),'\','\\') + '''','WQL', 0, nil);

  Enum:= (WMIListPrinters._NewEnum) as IEnumVariant;
  while (Enum.Next(1, TempObj, Value) = S_OK) do
  begin
    WMIPrinter:= IUnknown(tempObj) as SWBemObject;
    if Printer='ALL' then
    Begin
      // ---------------------------------------------
      // вывод на экран тестового сообщения
      WriteToTestLog('=== '+WMIPrinter.GetObjectText_(0));
      // ---------------------------------------------
    end
    else
    Begin
      PropSet:= WMIPrinter.Properties_;
      PropEnum:= (PropSet._NewEnum) as IEnumVariant;
      while (PropEnum.Next(1, TempObj, Value) = S_OK) do
      begin
        SProp:= IUnknown(TempObj) as SWBemProperty;
        PropName:=SProp.Name;
        if AnsiUpperCase(PropName)=AnsiUpperCase(Parameter) then
        Begin
          Result:=GetPropValue(SProp);
          break;
        end;
      end;
      break;
    end;
  end;
End;

Procedure FillPrinterInfo;
var
  PrnBuf, Buffer: PChar;
  CountBuffer, SizeBuffer : DWORD;
  Success: boolean;
  DefaultPrinter:string;
  Reg:TRegistry;
  MasterKeys: TStringList;
  ChildKeys: TStringList;
  tmpStrings: TStringList;
  i,tmpI: integer;
  tmpS:string;

Begin
  // ---------------------------------------------
  // вывод на экран тестового сообщения
  WriteToTestLog('=== Информация о принтерах');
  // ---------------------------------------------

  // Определяем перечень принтеров
  CountBuffer := 0;
  SizeBuffer := 0;
  PrinterCount := 0;

  // Определяем кол-во памяти
  EnumPrinters(PRINTER_ENUM_LOCAL, nil, 2, nil, 0, SizeBuffer, CountBuffer);
  if SizeBuffer=0 then
  Begin
    // ---------------------------------------------
    // вывод на экран тестового сообщения
    WriteToTestLog('=== Нет принтеров');
    // ---------------------------------------------
    exit;
  End;

  GetWMIPrinterParameter('ALL','');

  GetMem( Buffer, SizeBuffer );
  Reg:=TRegistry.Create(KEY_READ);
  MasterKeys:=TStringList.Create;
  ChildKeys:=TStringList.Create;
  tmpStrings:=TStringList.Create;

  try
    Success:=EnumPrinters(PRINTER_ENUM_LOCAL, nil, 2, PByte(Buffer), SizeBuffer, SizeBuffer, CountBuffer);

    If not Success then
    begin
      // ---------------------------------------------
      // вывод на экран тестового сообщения
      WriteToTestLog('=== Неудачное получение информации о принтерах');
      // ---------------------------------------------
      PrinterCount:=1;
      PrinterInfo[PrinterCount].NETBIOS_NAME:=Copy(ComputerName,1,100);
      PrinterInfo[PrinterCount].PRINTER_NAME:='Не получена информация о принтерах!';
      PrinterInfo[PrinterCount].PRINTER_DEVICE_ID:='UNKNOWN';
      PrinterInfo[PrinterCount].PRINTER_ATTACHED:=0;
      PrinterInfo[PrinterCount].PRINTER_STATUS:='UNKNOWN';
    end
    else
    Begin
      PrnBuf:=Buffer;

      for i:=0 to CountBuffer-1 do
      with (PPrinterInfo2(PrnBuf)^) do
      Begin
        inc(PrinterCount);

        PrinterInfo[PrinterCount].NETBIOS_NAME:=Copy(ComputerName,1,100);
        tmpS:=pPrinterName;
        PrinterInfo[PrinterCount].PRINTER_NAME:=Copy(tmpS,1,100);
        PrinterInfo[PrinterCount].PRINTER_DEVICE_ID:=PrinterInfo[PrinterCount].PRINTER_NAME;
        tmpS:=pShareName;
        PrinterInfo[PrinterCount].PRINTER_SHARE_NAME:=Copy(tmpS,1,100);
        PrinterInfo[PrinterCount].PRINTER_MANUFACTURER:='';
        tmpS:=pPortName;
        PrinterInfo[PrinterCount].PRINTER_PORT:=Copy(tmpS,1,50);
        PrinterInfo[PrinterCount].PRINTER_SERIAL_NUMBER:='';
        PrinterInfo[PrinterCount].PRINTER_HARDWARE_DATE:='';
        tmpS:=pLocation;
        PrinterInfo[PrinterCount].PRINTER_LOCATION:=Copy(tmpS,1,100);
        PrinterInfo[PrinterCount].PRINTER_JOBS:=cJobs;
        PrinterInfo[PrinterCount].PRINTER_AVERAGE:=AveragePPM;
        tmpS:=pDriverName;
        PrinterInfo[PrinterCount].PRINTER_DRIVER_NAME:=Copy(tmpS,1,100);
        PrinterInfo[PrinterCount].PRINTER_DRIVER_DATE:='';
        PrinterInfo[PrinterCount].PRINTER_EDID:='';

        try
          tmpI:=0;
          tmpS:=GetWMIPrinterParameter(PrinterInfo[PrinterCount].PRINTER_NAME,'Attributes');
          if tmpS<>'' then tmpI:=StrToInt(tmpS);
        except
          tmpI:=0;
        end;
        if tmpI=0 then tmpI:=Attributes;
        PrinterInfo[PrinterCount].PRINTER_ATTRIBUTE:=WordToBin(tmpI);


        if (Attributes AND PRINTER_ATTRIBUTE_NETWORK)>0 then PrinterInfo[PrinterCount].PRINTER_LOCAL:=0;
        if (Attributes AND PRINTER_ATTRIBUTE_LOCAL)>0 then PrinterInfo[PrinterCount].PRINTER_LOCAL:=1;
        if (Attributes AND PRINTER_ATTRIBUTE_SHARED)=0 then PrinterInfo[PrinterCount].PRINTER_SHARE_NAME:='';
        if (Attributes AND PRINTER_ATTRIBUTE_FAX)>0 then PrinterInfo[PrinterCount].PRINTER_FAX:=1;
        if ((Attributes AND PRINTER_ATTRIBUTE_DEFAULT)>0) or
           (GetWMIPrinterParameter(PrinterInfo[PrinterCount].PRINTER_NAME,'Default')='TRUE') then
           PrinterInfo[PrinterCount].PRINTER_PRIMARY:=1;

        tmpS:='';
        case Status of
          PRINTER_STATUS_BUSY: tmps:='The printer is busy.';
          PRINTER_STATUS_DOOR_OPEN: tmps:='The printer door is open.';
          PRINTER_STATUS_ERROR: tmps:='The printer is in an error state.';
          PRINTER_STATUS_INITIALIZING: tmps:='The printer is initializing.';
          PRINTER_STATUS_IO_ACTIVE: tmps:='The printer is in an active input/output state';
          PRINTER_STATUS_MANUAL_FEED: tmps:='The printer is in a manual feed state.';
          PRINTER_STATUS_NO_TONER: tmps:='The printer is out of toner.';
          PRINTER_STATUS_NOT_AVAILABLE: tmps:='The printer is not available for printing.';
          PRINTER_STATUS_OFFLINE: tmps:='The printer is offline.';
          PRINTER_STATUS_OUT_OF_MEMORY: tmps:='The printer has run out of memory.';
          PRINTER_STATUS_OUTPUT_BIN_FULL: tmps:='The printer''s output bin is full.';
          PRINTER_STATUS_PAGE_PUNT: tmps:='The printer cannot print the current page.';
          PRINTER_STATUS_PAPER_JAM: tmps:='Paper is jammed in the printer';
          PRINTER_STATUS_PAPER_OUT: tmps:='The printer is out of paper.';
          PRINTER_STATUS_PAPER_PROBLEM: tmps:='The printer has a paper problem.';
          PRINTER_STATUS_PAUSED: tmps:='The printer is paused.';
          PRINTER_STATUS_PENDING_DELETION: tmps:='The printer is being deleted.';
          PRINTER_STATUS_POWER_SAVE: tmps:='The printer is in power save mode.';
          PRINTER_STATUS_PRINTING: tmps:='The printer is printing.';
          PRINTER_STATUS_PROCESSING: tmps:='The printer is processing a print job.';
          PRINTER_STATUS_SERVER_UNKNOWN: tmps:='The printer status is unknown.';
          PRINTER_STATUS_TONER_LOW: tmps:='The printer is low on toner.';
          PRINTER_STATUS_USER_INTERVENTION: tmps:='The printer has an error that requires the user to do something.';
          PRINTER_STATUS_WAITING: tmps:='The printer is waiting.';
          PRINTER_STATUS_WARMING_UP: tmps:='The printer is warming up.';
          ELSE tmps:='Unknown';
        end;
        PrinterInfo[PrinterCount].PRINTER_STATUS:=Copy(tmpS,1,100);

        if (GetWMIPrinterParameter(PrinterInfo[PrinterCount].PRINTER_NAME,'WorkOffline')='TRUE') then
        Begin
          PrinterInfo[PrinterCount].PRINTER_ATTACHED:=0;
        End
        else
        Begin
          PrinterInfo[PrinterCount].PRINTER_ATTACHED:=1;
        End;

        with PDeviceMode(pDevMode)^ do
        Begin
          tmpS:=dmDeviceName;
          PrinterInfo[PrinterCount].PRINTER_DEVICE_ID:=Copy(tmpS,1,250);
          PrinterInfo[PrinterCount].PRINTER_DRIVER_VERSION:=IntToStr(dmDriverVersion);

          if (dmFields AND DM_ORIENTATION)>0 then
            if dmOrientation=1 then PrinterInfo[PrinterCount].PRINTER_ORIENTATION:='PORTRAIT'
            else PrinterInfo[PrinterCount].PRINTER_ORIENTATION:='LANDSCAPE';
          if ((dmFields AND DM_COLOR)>0) and (dmColor=DMCOLOR_COLOR) then PrinterInfo[PrinterCount].PRINTER_COLOR:=1;
          if ((dmFields AND DM_DUPLEX)>0) then PrinterInfo[PrinterCount].PRINTER_DUPLEX:=dmDuplex;
          case dmPrintQuality of
            DMRES_HIGH: PrinterInfo[PrinterCount].PRINTER_RESOLUTION:='HIGH';
            DMRES_MEDIUM: PrinterInfo[PrinterCount].PRINTER_RESOLUTION:='MEDIUM';
            DMRES_LOW: PrinterInfo[PrinterCount].PRINTER_RESOLUTION:='LOW';
            DMRES_DRAFT: PrinterInfo[PrinterCount].PRINTER_RESOLUTION:='DRAFT';
            else
            try
              PrinterInfo[PrinterCount].PRINTER_RESOLUTION:=IntToStr(dmPrintQuality);
            except
            end;
          end;
        end;

        tmpS:=GetWMIPrinterParameter(PrinterInfo[PrinterCount].PRINTER_NAME,'PrinterPaperNames');
        if Pos('A3',tmpS)> 0 then PrinterInfo[PrinterCount].PRINTER_PAPER_SIZE:='A3'
        else PrinterInfo[PrinterCount].PRINTER_PAPER_SIZE:='A4';

        inc(PrnBuf,SizeOf(TPrinterInfo2));
      end;
    end;

  finally
    FreeMem( Buffer, SizeBuffer );
    Reg.Free;
    MasterKeys.Clear;
    MasterKeys.Free;
    ChildKeys.Clear;
    ChildKeys.Free;
    tmpStrings.Clear;
    tmpStrings.Free;
  end;

End;

end.
